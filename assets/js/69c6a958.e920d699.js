"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6576],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return d}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),u=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=u(a),d=r,f=m["".concat(l,".").concat(d)]||m[d]||c[d]||o;return a?n.createElement(f,s(s({ref:t},p),{},{components:a})):n.createElement(f,s({ref:t},p))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var u=2;u<o;u++)s[u]=a[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8781:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return c}});var n=a(7462),r=a(3366),o=(a(7294),a(3905)),s=["components"],i={sidebar_position:3},l="store.useState",u={unversionedId:"api_reference/high_level_api/store.useState",id:"api_reference/high_level_api/store.useState",title:"store.useState",description:"store.useState is a hook that used to get a global state from a store, it's a way for a component to subscribe to a global state from a store. store.useState works just like React.useState hook but it accepts a key for the global state and returns an array of [state, setState, updateState] rather than [state, setState]. In addition to the key parameter it also accept another optional parameter which is the config object, available configurations are default, persist, selector & patcher, these will be discussed in detail later.",source:"@site/docs/api_reference/high_level_api/store.useState.md",sourceDirName:"api_reference/high_level_api",slug:"/api_reference/high_level_api/store.useState",permalink:"/docs/api_reference/high_level_api/store.useState",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api_reference/high_level_api/store.useState.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"store.setState",permalink:"/docs/api_reference/high_level_api/store.setState"},next:{title:"store.useReducer",permalink:"/docs/api_reference/high_level_api/store.useReducer"}},p={},c=[],m={toc:c};function d(e){var t=e.components,a=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"storeusestate"},"store.useState"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"store.useState")," is a hook that used to get a global state from a store, it's a way for a component to subscribe to a global state from a store. ",(0,o.kt)("inlineCode",{parentName:"p"},"store.useState")," works just like ",(0,o.kt)("inlineCode",{parentName:"p"},"React.useState")," hook but it accepts a key for the global state and returns an array of ",(0,o.kt)("inlineCode",{parentName:"p"},"[state, setState, updateState]")," rather than ",(0,o.kt)("inlineCode",{parentName:"p"},"[state, setState]"),". In addition to the key parameter it also accept another optional parameter which is the config object, available configurations are ",(0,o.kt)("inlineCode",{parentName:"p"},"default"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"persist"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"selector")," & ",(0,o.kt)("inlineCode",{parentName:"p"},"patcher"),", these will be discussed in detail later."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Signature\nstore.useState(\n    key: String,\n    config?: {default: Any, persist: Boolean, selector: Function, patcher: Function}\n)\n")),(0,o.kt)("p",null,"Below is an example showing how to use ",(0,o.kt)("inlineCode",{parentName:"p"},"store.useState")," hook"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const initialGlobalState = {\n    name: "Yezy",\n    age: 25,\n    email: "yezy@me.com"\n}\n\nstore.setState("user", initialGlobalState);\n\nfunction Component(props){\n    const [user, setUser, updateUser] = store.useState("user");\n    // Other stuff\n}\n')),(0,o.kt)("p",null,"Here ",(0,o.kt)("inlineCode",{parentName:"p"},"updateUser")," is a higher order function which accepts another function for updating user as an argument(this another functions takes user(old state) as the argument). So to update any value on user you could do"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'updateUser(function(user){\n    user.name = "Yezy Ilomo";\n    user.age = 26;\n})\n')),(0,o.kt)("p",null,"Or you could just use ",(0,o.kt)("inlineCode",{parentName:"p"},"setUser")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"updateUser")," i.e"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'setUser({name: "Yezy Ilomo", age: 26, email: "yezy@me.com"});\n')),(0,o.kt)("p",null,"Or"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'setUser(function(user){\n    return {\n        name: "Yezy Ilomo",\n        age: 26,\n        email: user.email\n    }\n})\n')),(0,o.kt)("p",null,"As stated earlier ",(0,o.kt)("inlineCode",{parentName:"p"},"store.useState")," takes a second optional parameter which is a configuration object, available configurations are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"default")," - This is used to specify the default value if you want ",(0,o.kt)("inlineCode",{parentName:"p"},"store.useState")," to create a global state if it doesn't find the one for the key specified in the first argument. For example"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const [user, setUser, updateUser] = store.useState("user", {default: null});\n')),(0,o.kt)("p",{parentName:"li"},'This piece of code means, get the global state for the key "user" if it\'s not available in a store, create one and assign it the value ',(0,o.kt)("inlineCode",{parentName:"p"},"null"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Also in addition to ",(0,o.kt)("inlineCode",{parentName:"p"},"default")," configuration there is ",(0,o.kt)("inlineCode",{parentName:"p"},"persist")," configuration which is the flag to determine whether to save/persist global state in your preferred storage or not. Here persist configuration is only used if ",(0,o.kt)("inlineCode",{parentName:"p"},"store.useState")," is going to create global state dynamically."),(0,o.kt)("br",null))),(0,o.kt)("p",null,"Other allowed configurations are ",(0,o.kt)("inlineCode",{parentName:"p"},"selector")," & ",(0,o.kt)("inlineCode",{parentName:"p"},"patcher"),". These are used for specifying a way to select deeply nested state and update it."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"selector")," should be a function which takes one parameter which is the global state and returns a selected value. The purpose of this is to subscribe to a deeply nested state.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"patcher")," should be a function which takes two parameters, the first is the global state and the second is the selected value. The purpose of this is to merge back the selected value to the global state once it's updated."),(0,o.kt)("p",{parentName:"li"},"Example."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'const initialGlobalState = {\n    name: "Yezy",\n    age: 25,\n    email: "yezy@me.com"\n}\n\nstore.setState("user", initialGlobalState);\n\n\nfunction UserName(props){\n    const selector = (user) => user.name;  // Subscribe to user.name only\n    const patcher = (user, name) => {user.name = name};  // Update user.name\n\n    const [name, setName] = store.useState("user", {selector: selector, patcher: patcher});\n\n    let handleNameChange = (e) => {\n        setName(e.target.value);\n    }\n\n    return (\n        <div>\n            Name: {name}\n            <br/>\n            <input type="text" value={name} onChange={handleNameChange}/>\n        </div>\n    );\n}\n')))))}d.isMDXComponent=!0}}]);